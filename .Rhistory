# add wordcount
d_fion$wordcount <- sapply(1:nrow(d_fion),
function(i) wordcount(d_fion$Utterance_clean[i]))
d_silvie$wordcount <- sapply(1:nrow(d_silvie),
function(i) wordcount(d_silvie$Utterance_clean[i]))
# only multi-word units
mwu_fion <- filter(d_fion, wordcount > 1)
mwu_silvie <- filter(d_silvie, wordcount > 1)
# Chunk 4
mwu_fion <- mwu_fion %>% mutate(Lang_Tags = case_when(
Utterance_clean == "darf ich this nicht aufraeumen" ~ "g g e g g",
Utterance_clean == "komm ich this nicht aufraeumen" ~ "g g e g g",
Utterance_clean == "und this my one" ~ "g e e e",
Utterance_clean == "nein no" ~ "g e",
Utterance_clean == "you did birthday in juni" ~ "e e e eg g",
Utterance_clean == "that istis ein birthday my nanny" ~ "e ge g e e e",
Utterance_clean == "und das ist von bob the builder und wendy" ~ "g g g g e e e g eg",
.default = Lang_Tags
))
mwu_silvie <- mwu_silvie %>% mutate(Lang_Tags = case_when(Utterance_clean == "und this noch" ~ "g e g",
Utterance_clean == "der postman pat" ~ "g e e",
Utterance_clean == "ja a game" ~ "g e e",
Utterance_clean == "ja this big one" ~ "g e e e",
Utterance_clean == "ja a starfish" ~ "g e e",
Utterance_clean == "ja the ribbon" ~ "g e e",
Utterance_clean == "das heisst naemlich train train train train" ~ "g g g e e e e",
.default = Lang_Tags))
# Chunk 5
mwu_fion$Lang_Tags <- gsub("e\\(meta\\)", "e", mwu_fion$Lang_Tags)
mwu_fion$Lang_Tags <- gsub("ge", "eg", mwu_fion$Lang_Tags)
mwu_fion$Lang_Tags <- gsub("m", "eg", mwu_fion$Lang_Tags)
mwu_silvie$Lang_Tags <- gsub("ge", "eg", mwu_silvie$Lang_Tags)
mwu_silvie$Lang_Tags <- gsub("m", "eg", mwu_silvie$Lang_Tags)
# Chunk 6
# add language tags
mwu_fion$Lang_Tags <- gsub("[[:punct:]]", "", mwu_fion$Lang_Tags)
mwu_silvie$Lang_Tags <- gsub("[[:punct:]]", "", mwu_silvie$Lang_Tags)
# add language tags on a word-by-word-basis to the non-code-mixed utterances
mwu_fion$Lang_Tags <- sapply(1:nrow(mwu_fion), function(i) ifelse(is.na(mwu_fion$Lang_Tags[i]), ifelse(mwu_fion[i,]$type=="german", paste0(rep("g", mwu_fion[i,]$wordcount), collapse = " "), paste0(rep("e", mwu_fion[i,]$wordcount), collapse = " ")), mwu_fion$Lang_Tags[i]))
mwu_silvie$Lang_Tags <- sapply(1:nrow(mwu_silvie), function(i) ifelse(is.na(mwu_silvie$Lang_Tags[i]), ifelse(mwu_silvie[i,]$type=="german", paste0(rep("g", mwu_silvie[i,]$wordcount), collapse = " "), paste0(rep("e", mwu_silvie[i,]$wordcount), collapse = " ")), mwu_silvie$Lang_Tags[i]))
# Chunk 7
bigrams_fion <- mwu_fion %>% unnest_tokens(bigram, Utterance_clean, token = "ngrams", n = 2, drop = FALSE)
bigrams_silvie <- mwu_silvie %>% unnest_tokens(bigram, Utterance_clean, token = "ngrams", n = 2, drop = FALSE)
bigrams_fion <- bind_cols(bigrams_fion,
mwu_fion %>% unnest_tokens(bigram_LangTag, Lang_Tags, token = "ngrams", n = 2, drop = FALSE) %>% select(bigram_LangTag))
bigrams_silvie <- bind_cols(bigrams_silvie,
mwu_silvie %>% unnest_tokens(bigram_LangTag, Lang_Tags, token = "ngrams", n = 2, drop = FALSE) %>% select(bigram_LangTag))
# one column for each word
bigrams_fion <- bigrams_fion %>% separate(bigram, c("word1", "word2"), sep = " ", remove = F)
bigrams_silvie <- bigrams_silvie %>% separate(bigram, c("word1", "word2"), sep = " ", remove = F)
bigrams_fion <- bigrams_fion %>% separate(bigram_LangTag, c("LangTag1", "LangTag2"), sep = " ", remove = F)
bigrams_silvie <- bigrams_silvie %>% separate(bigram_LangTag, c("LangTag1", "LangTag2"), sep = " ", remove = F)
# add child column
bigrams_fion <- mutate(bigrams_fion, Child = "Fion")
bigrams_silvie <- mutate(bigrams_silvie, Child = "Silvie")
# Chunk 8
# number of words
d_fion %>% group_by(Month) %>% summarise(
n_words = n(),
n_files = length(unique(Filename))
) %>% ggplot(aes(x=Month, y = n_words, label = n_files)) +
geom_point() +
geom_line(group = 1) +
geom_text(position = position_stack(), vjust = -0.4) +
theme(axis.text.x = element_text(angle=45, hjust=.9, size=12)) +
ylab("Number of words") +
ggtitle("Fion (numbers indicate number of transcripts)") + d_silvie %>% group_by(Month) %>% summarise(
n_words = n(),
n_files = length(unique(Filename))
) %>% ggplot(aes(x=Month, y = n_words, label = n_files)) +
geom_point() +
geom_line(group = 1) +
geom_text(position = position_stack(), vjust = -0.4) +
theme(axis.text.x = element_text(angle=45, hjust=.9, size=12)) +
ylab("Number of words") +
ggtitle("Silvie (numbers indicate number of transcripts)")
# Chunk 9
# function for getting equal-sized intervals
get_equal_bins <- function(x, n) {
cur_var <- 1:length(unique(x))
cur_breaks <- round(seq(1, length(unique(x)), by = length(unique(x)) / n))
# add last number to breaks
cur_breaks[length(cur_breaks)+1] <- cur_var[length(cur_var)]
# add 0 to var and breaks so that we can calculate +1
# below to avoid overlaps between two groups
cur_var <- c(0, cur_var)
cur_breaks[1] <- 0
# cur_breaks[1] <- 0 # to make sure that it starts with 1
cur_list <- lapply(1:(length(cur_breaks)-1), function(i) cur_var[((which(cur_var==cur_breaks[i])+1)):(which(cur_var==cur_breaks[1+i]))])
return(cur_list)
}
# function for adding months column
add_month_bins <- function(df, n_bins) {
cur_bins <- get_equal_bins(df$Month, n_bins)
# list to dataframe
cur_bins_df <- do.call(rbind, lapply(1:length(cur_bins), function(i) tibble(index = i,
no    = cur_bins[[i]])))
# get bin range
bins_tbl01 <- tibble(age = unique(df$Month),
no = 1:length(unique(df$Month)))
# join
cur_bins_df <- left_join(cur_bins_df, bins_tbl01)
# bins in character form (from a to b)
cur_bins_ch <- sapply(1:length(cur_bins), function(i) paste0(unique(df$Month)[cur_bins[[i]][1]], "-",
unique(df$Month)[cur_bins[[i]][length(cur_bins[[i]])]]))
# in tabular form
bins_tbl <- tibble(bin = 1:length(cur_bins),
age_range = cur_bins_ch)
# add to existing dataframe
cur_bins_df <- left_join(cur_bins_df, bins_tbl, by = c("index" = "bin"))
# return Months column
cur_df_with_age_range <- left_join(df, select(cur_bins_df, age, age_range), by = c("Month" = "age"))
return(cur_df_with_age_range)
}
# Chunk 10
# how many months for Fion and Silvie?
length(unique(d_fion$Month))
length(unique(d_silvie$Month))
# add bins
bigrams_fion <- bigrams_fion %>% add_month_bins(n_bins = 7)
bigrams_silvie <- bigrams_silvie %>% add_month_bins(n_bins = 6)
# get samples
# Fion:
for(i in 1:7) {
cur_fion <- filter(bigrams_fion, age_range == levels(factor(bigrams_fion$age_range))[i])
set.seed(i)
cur_samples <- lapply(1:100, function(i) sample(1:length(unique(cur_fion$Utt_no)), 450))
assign(paste0("bigrams_fion0", i), cur_fion[unlist(cur_samples),])
}
# Silvie:
for(i in 1:6) {
cur_silvie <- filter(bigrams_silvie, age_range == levels(factor(bigrams_silvie$age_range))[i])
set.seed(i)
cur_samples <- lapply(1:100, function(i) sample(1:length(unique(cur_silvie$Utt_no)), 450))
assign(paste0("bigrams_silvie0", i), cur_silvie[unlist(cur_samples),])
}
# Chunk 11
get_network <- function(bigram_df, n_min = 0, modularity_measure = FALSE) {
# count the bigram_df
bigrams_count <- bigram_df %>% group_by(LangTag1, LangTag2) %>% count(word1, word2, sort = T)
# filter out all below 5
l <- bigrams_count %>%
filter(n >= n_min)
# check if there are data
if(nrow(l) > 0) {
# get bigram graph edges and vertices
bigram_graph <- bigrams_count %>%
filter(n >= n_min) %>%
ungroup %>% select(word1, word2, n) %>% graph_from_data_frame(directed = FALSE)
# set weight attributes
bigram_graph <- set_edge_attr(bigram_graph, "weight", value = l$n)
# set labels
V(bigram_graph)$label <- V(bigram_graph)$name
# Louvain clustering
lv <- cluster_louvain(bigram_graph)
# add Louvain clustering to graph
V(bigram_graph)$community <- membership(lv)
# add language and word frequency as attributes
# to do so, we need a list of unigrams
# language tags of unigrams
unigram_LangTags <-  bind_cols(bigram_df %>% select(Utt_no, Utterance_clean, Lang_Tags) %>% unique() %>% unnest_tokens(output = "unigram", input = "Utterance_clean", token = "ngrams", n = 1),
select(bigram_df %>% select(Utt_no, Utterance_clean, Lang_Tags) %>% unique() %>% unnest_tokens(output = "unigram_LangTag", input = Lang_Tags, token = "ngrams", n = 1), unigram_LangTag)) %>% select(unigram, unigram_LangTag) %>% unique()
# get frequencies of individual words
unigrams_freqs <- bigram_df %>% select(Utt_no, Utterance_clean) %>% unique() %>% unnest_tokens(output = "unigram", input = Utterance_clean) %>% group_by(unigram) %>% summarise(
n = n()
)
# add unigram LangTags as attributes to the graph
V(bigram_graph)$language <- sapply(1:length(V(bigram_graph)), function(i) unigram_LangTags[which(unigram_LangTags$unigram == V(bigram_graph)$name[i]),]$unigram_LangTag[1])
# add color as attribute
V(bigram_graph)$color <- case_when(V(bigram_graph)$language == "g" ~ "salmon",
V(bigram_graph)$language == "e" ~ "deepskyblue",
V(bigram_graph)$language == "eg" ~ "tan",
.default = "grey")
# add frequency as attribute
V(bigram_graph)$Freq <- sapply(1:length(V(bigram_graph)), function(i) unigrams_freqs[which(unigrams_freqs$unigram==V(bigram_graph)$name[i]),]$n[1])
# return graph or modularity measure
if(modularity_measure) {
return(modularity(lv))
} else {
return(bigram_graph)
}
}
}
# function for plotting
get_plot <- function(cur_network, myseed = 1999, min_freq = 0, interactive = FALSE, repel = TRUE, max.overlaps = 20, communities = "all") {
# allow for selecting individual communities
if(communities == "all") {
layout <- create_layout(cur_network, layout = "fr")
} else {
layout <- filter(cur_network, community %in% communities)
}
# Compute layout
# Build plot
set.seed(myseed)
p <- ggplot(layout) +
geom_edge_link(aes(x = x, y = y, xend = xend, yend = yend, edge_width = rescale(weight, to = c(.05, .5)), alpha = weight), color = "gray") +
geom_point_interactive(
aes(x = x, y = y, tooltip = name, color = color, size = Freq)
) +
geom_node_text(aes(label = ifelse(Freq > min_freq, name, ""), size = Freq), repel = repel, max.overlaps = max.overlaps) +
stat_ellipse(aes(x=x, y=y, group = as.factor(community), fill = as.factor(community)),
geom = "polygon", alpha = 0.1, color = NA) +
scale_color_identity() +
theme_void() +
theme(legend.position = "none")
if(interactive) {
# Zoomable plot with girafe
g <- girafe(
ggobj = p,
options = list(
opts_zoom(min = 1, max = 60),
opts_toolbar(saveaspng = TRUE)
)
)
return(g)
} else {
return(p)
}
}
# create seven plot objects named p_f1 to p_f7 for Fion's networks
for(i in 1:7) {
assign(paste0("p_f", i), get(paste0("bigrams_fion0", i)) %>% get_network() %>% get_plot(repel = FALSE, min_freq = 5) + ggtitle(levels(factor(bigrams_fion$age_range))[i]) + theme(plot.title = element_text(face = "bold", hjust = 0.5)))
}
(p_f1 | p_f2 | p_f3) /
(p_f4 | p_f5 | p_f6) /
p_f7
(p_f1 | p_f2 | p_f3) /
(p_f4 | p_f5 | p_f6) /
p_f7
# create seven plot objects named p_f1 to p_f7 for Fion's networks
for(i in 1:7) {
assign(paste0("p_f", i), get(paste0("bigrams_fion0", i)) %>% get_network() %>% get_plot(repel = TRUE, max.overlaps = 50, min_freq = 5) + ggtitle(levels(factor(bigrams_fion$age_range))[i]) + theme(plot.title = element_text(face = "bold", hjust = 0.5)))
}
(p_f1 | p_f2 | p_f3) /
(p_f4 | p_f5 | p_f6) /
p_f7
ggsave("images/fion_networks01.png", width = 15, height = 15)
# individual communities
bigrams_fion01 %>% get_network() %>% get_plot(communities = 1)
# function for plotting
get_plot <- function(cur_network, myseed = 1999, min_freq = 0, interactive = FALSE, repel = TRUE, max.overlaps = 20, communities = "all") {
# get plot layout
layout <- create_layout(cur_network, layout = "fr")
# allow for selecting individual communities
if(communities != "all") {
layout <- filter(layout, community %in% communities)
}
# Build plot
set.seed(myseed)
p <- ggplot(layout) +
geom_edge_link(aes(x = x, y = y, xend = xend, yend = yend, edge_width = rescale(weight, to = c(.05, .5)), alpha = weight), color = "gray") +
geom_point_interactive(
aes(x = x, y = y, tooltip = name, color = color, size = Freq)
) +
geom_node_text(aes(label = ifelse(Freq > min_freq, name, ""), size = Freq), repel = repel, max.overlaps = max.overlaps) +
stat_ellipse(aes(x=x, y=y, group = as.factor(community), fill = as.factor(community)),
geom = "polygon", alpha = 0.1, color = NA) +
scale_color_identity() +
theme_void() +
theme(legend.position = "none")
if(interactive) {
# Zoomable plot with girafe
g <- girafe(
ggobj = p,
options = list(
opts_zoom(min = 1, max = 60),
opts_toolbar(saveaspng = TRUE)
)
)
return(g)
} else {
return(p)
}
}
# individual communities
bigrams_fion01 %>% get_network() %>% get_plot(communities = 1)
# individual communities
bigrams_fion01 %>% get_network() %>% get_plot(communities = 1:3)
# function for plotting
get_plot <- function(cur_network, myseed = 1999, min_freq = 0, interactive = FALSE, repel = TRUE, max.overlaps = 20, communities = "all") {
# get plot layout
layout <- create_layout(cur_network, layout = "fr")
# allow for selecting individual communities
if(any(communities != "all")) {
layout <- filter(layout, community %in% communities)
}
# Build plot
set.seed(myseed)
p <- ggplot(layout) +
geom_edge_link(aes(x = x, y = y, xend = xend, yend = yend, edge_width = rescale(weight, to = c(.05, .5)), alpha = weight), color = "gray") +
geom_point_interactive(
aes(x = x, y = y, tooltip = name, color = color, size = Freq)
) +
geom_node_text(aes(label = ifelse(Freq > min_freq, name, ""), size = Freq), repel = repel, max.overlaps = max.overlaps) +
stat_ellipse(aes(x=x, y=y, group = as.factor(community), fill = as.factor(community)),
geom = "polygon", alpha = 0.1, color = NA) +
scale_color_identity() +
theme_void() +
theme(legend.position = "none")
if(interactive) {
# Zoomable plot with girafe
g <- girafe(
ggobj = p,
options = list(
opts_zoom(min = 1, max = 60),
opts_toolbar(saveaspng = TRUE)
)
)
return(g)
} else {
return(p)
}
}
# individual communities
bigrams_fion01 %>% get_network() %>% get_plot(communities = 1:3)
bigrams_fion04 %>% get_network() %>% get_plot(communities = 1:3)
bigrams_fion07 %>% get_network() %>% get_plot(communities = 1:3)
# individual communities
bigrams_fion01 %>% get_network() %>% get_plot(communities = 1:3)
bigrams_fion04 %>% get_network() %>% get_plot(communities = 1:3)
bigrams_fion07 %>% get_network() %>% get_plot(communities = 1:3)
# individual communities
bigrams_fion01 %>% get_network() %>% get_plot(communities = 1:3)
# individual communities
bigrams_fion01 %>% get_network() %>% get_plot(communities = 1:3) + ggtitle(levels(factor(bigrams_fion$age_range))[1])
# individual communities
bigrams_fion01 %>% get_network() %>% get_plot(communities = 1:3) + ggtitle(levels(factor(bigrams_fion$age_range))[1]) + theme(plot.title = element_text(face = "bold", hjust = 0.5))
bigrams_silvie01 %>% get_network() %>% get_plot(communities = 1:3) + ggtitle(levels(factor(bigrams_silvie$age_range))[1]) + theme(plot.title = element_text(face = "bold", hjust = 0.5))
bigrams_silvie03 %>% get_network() %>% get_plot(communities = 1:3) + ggtitle(levels(factor(bigrams_silvie$age_range))[3]) + theme(plot.title = element_text(face = "bold", hjust = 0.5))
bigrams_silvie06 %>% get_network() %>% get_plot(communities = 1:3) + ggtitle(levels(factor(bigrams_silvie$age_range))[6]) + theme(plot.title = element_text(face = "bold", hjust = 0.5))
# individual communities
bigrams_fion01 %>% get_network() %>% create_layout(layout = "fr")
# individual communities
bigrams_fion01 %>% get_network() %>% create_layout(layout = "fr") %>% select(community) %>% table
# individual communities
bigrams_fion01 %>% get_network() %>% create_layout(layout = "fr") %>% select(community) %>% table %>% sort
# individual communities
bigrams_fion01 %>% get_network() %>% create_layout(layout = "fr") %>% select(community) %>% table %>% sort %>% tail(3)
# individual communities
bigrams_fion01 %>% get_network() %>% create_layout(layout = "fr") %>% select(community) %>% table %>% sort %>% tail(3) %>% unname()
# individual communities
bigrams_fion01 %>% get_network() %>% create_layout(layout = "fr") %>% select(community) %>% table %>% sort %>% tail(3) %>% names()
# individual communities
bigrams_fion01 %>% get_network() %>% create_layout(layout = "fr") %>% select(community) %>% table %>% sort %>% tail(3)
# individual communities
bigrams_fion01 %>% get_network() %>% create_layout(layout = "fr") %>% select(community)
# individual communities
bigrams_fion01 %>% get_network() %>% create_layout(layout = "fr") %>% select(community) %>% table
# individual communities
bigrams_fion01 %>% get_network() %>% create_layout(layout = "fr") %>% select(community) %>% table %>% sort(decreasing = T)
# individual communities
bigrams_fion01 %>% get_network() %>% create_layout(layout = "fr") %>% select(community) %>% table %>% sort(decreasing = T) %>% head(3)
# individual communities
bigrams_fion01 %>% get_network() %>% create_layout(layout = "fr") %>% group_by(community) %>% summarise(
n = n()
) %>% arrange(desc(n))
# individual communities
bigrams_fion01 %>% get_network() %>% create_layout(layout = "fr") %>% group_by(community) %>% summarise(
n = n()
) %>% arrange(desc(n)) %>% head(3)
# individual communities
bigrams_fion01 %>% get_network() %>% create_layout(layout = "fr") %>% select(community)
# individual communities
bigrams_fion01 %>% get_network() %>% create_layout(layout = "fr") %>% select(community) %>% table()
# individual communities
bigrams_fion01 %>% get_network() %>% create_layout(layout = "fr") %>% select(community) %>% table() %>% sort
bigrams_fion01 %>% get_network() %>% create_layout(layout = "fr") %>% group_by(community) %>% summarise(
n = n()
) %>% arrange(desc(n)) %>% head(3)
# individual communities
bigrams_fion01 %>% get_network() %>% create_layout(layout = "fr") %>% select(community) %>% table() %>% sort
# individual communities
cur_network <- bigrams_fion01 %>% get_network()
cur_network %>% create_layout(layout = "fr") %>% select(community) %>% table() %>% sort
cur_network %>% get_network() %>% create_layout(layout = "fr") %>% group_by(community) %>% summarise(
n = n()
) %>% arrange(desc(n)) %>% head(3)
cur_network %>% create_layout(layout = "fr") %>% group_by(community) %>% summarise(
n = n()
) %>% arrange(desc(n)) %>% head(3)
cur_network %>% create_layout(layout = "fr") %>% group_by(community) %>% summarise(
n = n()
) %>% arrange(desc(n)) %>% head(3) %>% select(community)
cur_network %>% create_layout(layout = "fr") %>% group_by(community) %>% summarise(
n = n()
) %>% arrange(desc(n)) %>% head(3) %>% select(community) %>% unname %>% ungroup
cur_network %>% create_layout(layout = "fr") %>% group_by(community) %>% summarise(
n = n()
) %>% arrange(desc(n)) %>% head(3) %>% select(community) %>% unname() %>% ungroup()
cur_network %>% create_layout(layout = "fr") %>% group_by(community) %>% summarise(
n = n()
) %>% arrange(desc(n)) %>% head(3) %>% select(community) %>% as.vector()
cur_network %>% create_layout(layout = "fr") %>% group_by(community) %>% summarise(
n = n()
) %>% arrange(desc(n)) %>% head(3) %>% select(community) %>% as.vector() %>% unname()
cur_network %>% create_layout(layout = "fr") %>% group_by(community) %>% summarise(
n = n()
) %>% arrange(desc(n)) %>% head(3) %>% select(community) %>% as.vector() %>% unname() %>% unlist()
# function for plotting
get_plot <- function(cur_network, myseed = 1999, min_freq = 0, interactive = FALSE, repel = TRUE, max.overlaps = 20, communities = "all", input = c("igraph", "layout")) {
if(input == "layout") {
layout <- cur_network
} else {
# get plot layout
layout <- create_layout(cur_network, layout = "fr")
}
# allow for selecting individual communities
if(any(communities != "all")) {
layout <- filter(layout, community %in% communities)
}
# Build plot
set.seed(myseed)
p <- ggplot(layout) +
geom_edge_link(aes(x = x, y = y, xend = xend, yend = yend, edge_width = rescale(weight, to = c(.05, .5)), alpha = weight), color = "gray") +
geom_point_interactive(
aes(x = x, y = y, tooltip = name, color = color, size = Freq)
) +
geom_node_text(aes(label = ifelse(Freq > min_freq, name, ""), size = Freq), repel = repel, max.overlaps = max.overlaps) +
stat_ellipse(aes(x=x, y=y, group = as.factor(community), fill = as.factor(community)),
geom = "polygon", alpha = 0.1, color = NA) +
scale_color_identity() +
theme_void() +
theme(legend.position = "none")
if(interactive) {
# Zoomable plot with girafe
g <- girafe(
ggobj = p,
options = list(
opts_zoom(min = 1, max = 60),
opts_toolbar(saveaspng = TRUE)
)
)
return(g)
} else {
return(p)
}
}
# create seven plot objects named p_f1 to p_f7 for Fion's networks
for(i in 1:7) {
assign(paste0("p_f", i), get(paste0("bigrams_fion0", i)) %>% get_network() %>% get_plot(repel = TRUE, max.overlaps = 50, min_freq = 5) + ggtitle(levels(factor(bigrams_fion$age_range))[i]) + theme(plot.title = element_text(face = "bold", hjust = 0.5)))
}
# function for plotting
get_plot <- function(cur_network, myseed = 1999, min_freq = 0, interactive = FALSE, repel = TRUE, max.overlaps = 20, communities = "all", input = "igraph") {
if(input == "layout") {
layout <- cur_network
} else {
# get plot layout
layout <- create_layout(cur_network, layout = "fr")
}
# allow for selecting individual communities
if(any(communities != "all")) {
layout <- filter(layout, community %in% communities)
}
# Build plot
set.seed(myseed)
p <- ggplot(layout) +
geom_edge_link(aes(x = x, y = y, xend = xend, yend = yend, edge_width = rescale(weight, to = c(.05, .5)), alpha = weight), color = "gray") +
geom_point_interactive(
aes(x = x, y = y, tooltip = name, color = color, size = Freq)
) +
geom_node_text(aes(label = ifelse(Freq > min_freq, name, ""), size = Freq), repel = repel, max.overlaps = max.overlaps) +
stat_ellipse(aes(x=x, y=y, group = as.factor(community), fill = as.factor(community)),
geom = "polygon", alpha = 0.1, color = NA) +
scale_color_identity() +
theme_void() +
theme(legend.position = "none")
if(interactive) {
# Zoomable plot with girafe
g <- girafe(
ggobj = p,
options = list(
opts_zoom(min = 1, max = 60),
opts_toolbar(saveaspng = TRUE)
)
)
return(g)
} else {
return(p)
}
}
# create seven plot objects named p_f1 to p_f7 for Fion's networks
for(i in 1:7) {
assign(paste0("p_f", i), get(paste0("bigrams_fion0", i)) %>% get_network() %>% get_plot(repel = TRUE, max.overlaps = 50, min_freq = 5) + ggtitle(levels(factor(bigrams_fion$age_range))[i]) + theme(plot.title = element_text(face = "bold", hjust = 0.5)))
}
(p_f1 | p_f2 | p_f3) /
(p_f4 | p_f5 | p_f6) /
p_f7
cur_network %>% create_layout(layout = "fr") %>% group_by(community) %>% summarise(
n = n()
) %>% arrange(desc(n)) %>% head(3) %>% select(community) %>% as.vector() %>% unname() %>% unlist()
largest_communities <- cur_network %>% create_layout(layout = "fr") %>% group_by(community) %>% summarise(
n = n()
) %>% arrange(desc(n)) %>% head(3) %>% select(community) %>% as.vector() %>% unname() %>% unlist()
cur_network <- bigrams_fion01
largest_communities <- cur_network %>% create_layout(layout = "fr") %>% group_by(community) %>% summarise(
n = n()
) %>% arrange(desc(n)) %>% head(3) %>% select(community) %>% as.vector() %>% unname() %>% unlist()
cur_network <- get_network(bigrams_fion01)
largest_communities <- cur_network %>% create_layout(layout = "fr") %>% group_by(community) %>% summarise(
n = n()
) %>% arrange(desc(n)) %>% head(3) %>% select(community) %>% as.vector() %>% unname() %>% unlist()
cur_network %>% get_plot(communities = largest_communities)
cur_network <- get_network(get(paste0("bigrams_fion01")))
cur_network <- get_network(get(paste0("bigrams_fion0", 1)))
for(i in 1:7) {
cur_network <- get_network(get(paste0("bigrams_fion0", i)))
largest_communities <- cur_network %>% create_layout(layout = "fr") %>% group_by(community) %>% summarise(
n = n()
) %>% arrange(desc(n)) %>% head(3) %>% select(community) %>% as.vector() %>% unname() %>% unlist()
assign(paste0("p_lc_f", i), cur_network %>% get_plot(communities = largest_communities))
}
p_lc_f1 + p_lc_f4 + p_lc_f7
