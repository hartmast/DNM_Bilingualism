n = sum(n)
) %>% arrange(desc(n))
bigrams_silvie_cds_count <- bigrams_cds_silvie %>% group_by(Utt_no, word1, word2, lang) %>% summarise(
n = n()
) %>% na.omit() %>% group_by(word1, word2, lang) %>%
summarise(
n = sum(n)
) %>% arrange(desc(n))
# add language tag to the words
# bigrams_fion_cds_count$word1 <- paste0(bigrams_fion_cds_count$word1, "_", bigrams_fion_cds_count$lang)
# bigrams_fion_cds_count$word2 <-paste0(bigrams_fion_cds_count$word2, "_", bigrams_fion_cds_count$lang)
# Chunk 14
# how many months for Fion and Silvie?
length(unique(d_fion$Month))
length(unique(d_silvie$Month))
# add bins
bigrams_fion <- bigrams_fion %>% add_month_bins(n_bins = 7)
bigrams_silvie <- bigrams_silvie %>% add_month_bins(n_bins = 6)
d_fion <- d_fion %>% add_month_bins(n_bins = 7)
d_silvie <- d_silvie %>% add_month_bins(n_bins = 6)
# Chunk 15
# Get bins
bigrams_cds_fion <- bigrams_cds_fion %>% add_month_bins(n = 3)
bigrams_cds_silvie <- bigrams_cds_silvie %>% add_month_bins(n = 3)
fion_cds <- fion_cds %>% add_month_bins(n = 3)
silvie_cds <- silvie_cds %>% add_month_bins(n = 3)
# Chunk 16
# get samples
# Fion:
for(i in 1:7) {
cur_fion <- filter(bigrams_fion, age_range == levels(factor(bigrams_fion$age_range))[i])
set.seed(i)
cur_samples <- sample(1:length(unique(cur_fion$Utt_no)), 450)
# cur_samples <- lapply(1:100, function(i) sample(1:length(unique(cur_fion$Utt_no)), 450)) # alternative with bootstrapping
assign(paste0("bigrams_fion0", i), cur_fion[unlist(cur_samples),])
}
# Silvie:
for(i in 1:6) {
cur_silvie <- filter(bigrams_silvie, age_range == levels(factor(bigrams_silvie$age_range))[i])
set.seed(i)
cur_samples <- sample(1:length(unique(cur_silvie$Utt_no)), 450)
#cur_samples <- lapply(1:100, function(i) sample(1:length(unique(cur_silvie$Utt_no)), 450))
assign(paste0("bigrams_silvie0", i), cur_silvie[unlist(cur_samples),])
}
# Chunk 17
# omit utterances consisting of only one word
bigrams_cds_fion <- bigrams_cds_fion %>% filter(Wordcount > 1)
bigrams_cds_silvie <- bigrams_cds_silvie %>% filter(Wordcount > 1)
# get 25,000-utterance samples for each of the bins
set.seed(12345)
for(i in 1:3) {
cur_bigrams <- bigrams_cds_fion %>% filter(age_range == levels(factor(bigrams_cds_fion$age_range))[i])
cur_spl <- sample(1:nrow(cur_bigrams), 45000)
assign(paste0("bigrams_cds_fion0", i), cur_bigrams[cur_spl,])
}
set.seed(12345)
for(i in 1:3) {
cur_bigrams <- bigrams_cds_silvie %>% filter(age_range == levels(factor(bigrams_cds_silvie$age_range))[i])
cur_spl <- sample(1:nrow(cur_bigrams), 45000)
assign(paste0("bigrams_cds_silvie0", i), cur_bigrams[cur_spl,])
}
# Chunk 18
get_network <- function(bigram_df,n_min = 0, modularity_measure = FALSE, edges = "ftp") {
# count the bigram_df
bigrams_count <- bigram_df %>% group_by(LangTag1, LangTag2) %>% count(word1, word2, sort = T)
# filter out all below n_min
l <- bigrams_count %>%
filter(n >= n_min)
# add transitional probabilities
l1 <- left_join(l, select(get_transition_probabilities(bigram_df, input_column = "Utterance_clean"), -n), by = c("word1", "word2") )
# check if there are data
if(nrow(l1) > 0) {
# get bigram graph edges and vertices
bigram_graph <- l1 %>%
filter(n >= n_min) %>%
ungroup %>% select(word1, word2, all_of(edges)) %>% graph_from_data_frame(directed = FALSE)
# set weight attributes
if(edges == "ftp") {
bigram_graph <- set_edge_attr(bigram_graph, "weight", value = l1$ftp)
} else if(edges=="btp") {
bigram_graph <- set_edge_attr(bigram_graph, "weight", value = l1$btp)
} else if(edges=="n") {
bigram_graph <- set_edge_attr(bigram_graph, "weight", value = l1$n)
}
# set labels
V(bigram_graph)$label <- V(bigram_graph)$name
# Louvain clustering
lv <- cluster_louvain(bigram_graph)
# add Louvain clustering to graph
V(bigram_graph)$community <- membership(lv)
# add color for each community
cur_palette <- viridis::cividis(n = max(V(bigram_graph)$community))
cur_communities <- V(bigram_graph)$community
V(bigram_graph)$community_color <- sapply(1:length(V(bigram_graph)$community), function(i)  cur_communities[i])
# add language and word frequency as attributes
# to do so, we need a list of unigrams
# language tags of unigrams
unigram_LangTags <-  bind_cols(bigram_df %>% select(Utt_no, Utterance_clean, Lang_Tags) %>% unique() %>% unnest_tokens(output = "unigram", input = "Utterance_clean", token = "ngrams", n = 1),
select(bigram_df %>% select(Utt_no, Utterance_clean, Lang_Tags) %>% unique() %>% unnest_tokens(output = "unigram_LangTag", input = Lang_Tags, token = "ngrams", n = 1), unigram_LangTag)) %>% select(unigram, unigram_LangTag) %>% unique()
# get frequencies of individual words
unigrams_freqs <- bigram_df %>% select(Utt_no, Utterance_clean) %>% unique() %>% unnest_tokens(output = "unigram", input = Utterance_clean) %>% group_by(unigram) %>% summarise(
n = n()
)
# add unigram LangTags as attributes to the graph
V(bigram_graph)$language <- sapply(1:length(V(bigram_graph)), function(i) unigram_LangTags[which(unigram_LangTags$unigram == V(bigram_graph)$name[i]),]$unigram_LangTag[1])
# add color as attribute
V(bigram_graph)$color <- case_when(V(bigram_graph)$language == "g" ~ "salmon",
V(bigram_graph)$language == "e" ~ "deepskyblue",
V(bigram_graph)$language == "eg" ~ "tan",
.default = "grey")
# add frequency as attribute
V(bigram_graph)$Freq <- sapply(1:length(V(bigram_graph)), function(i) unigrams_freqs[which(unigrams_freqs$unigram==V(bigram_graph)$name[i]),]$n[1])
# return graph or modularity measure
if(modularity_measure) {
return(modularity(lv))
} else {
return(bigram_graph)
}
}
}
# Chunk 19
# add missing columns (for compatibility with the above-defined functions)
bigrams_cds_fion$LangTag1 <- bigrams_cds_fion$lang
bigrams_cds_fion$LangTag2 <- bigrams_cds_fion$lang
bigrams_cds_fion$Lang_Tags <- bigrams_cds_fion$lang
bigrams_cds_fion$Utterance_clean <- bigrams_cds_fion$Utterance
bigrams_cds_silvie$LangTag1 <- bigrams_cds_silvie$lang
bigrams_cds_silvie$LangTag2 <- bigrams_cds_silvie$lang
bigrams_cds_silvie$Lang_Tags <- bigrams_cds_silvie$lang
bigrams_cds_silvie$Utterance_clean <- bigrams_cds_silvie$Utterance
bigrams_cds_fion01$LangTag1 <- bigrams_cds_fion01$lang
bigrams_cds_fion01$LangTag2 <- bigrams_cds_fion01$lang
bigrams_cds_fion01$Lang_Tags <- bigrams_cds_fion01$lang
bigrams_cds_fion01$Utterance_clean <- bigrams_cds_fion01$Utterance
bigrams_cds_silvie01$LangTag1 <- bigrams_cds_silvie01$lang
bigrams_cds_silvie01$LangTag2 <- bigrams_cds_silvie01$lang
bigrams_cds_silvie01$Lang_Tags <- bigrams_cds_silvie01$lang
bigrams_cds_silvie01$Utterance_clean <- bigrams_cds_silvie01$Utterance
bigrams_cds_fion02$LangTag1 <- bigrams_cds_fion02$lang
bigrams_cds_fion02$LangTag2 <- bigrams_cds_fion02$lang
bigrams_cds_fion02$Lang_Tags <- bigrams_cds_fion02$lang
bigrams_cds_fion02$Utterance_clean <- bigrams_cds_fion02$Utterance
bigrams_cds_silvie02$LangTag1 <- bigrams_cds_silvie02$lang
bigrams_cds_silvie02$LangTag2 <- bigrams_cds_silvie02$lang
bigrams_cds_silvie02$Lang_Tags <- bigrams_cds_silvie02$lang
bigrams_cds_silvie02$Utterance_clean <- bigrams_cds_silvie02$Utterance
bigrams_cds_fion03$LangTag1 <- bigrams_cds_fion03$lang
bigrams_cds_fion03$LangTag2 <- bigrams_cds_fion03$lang
bigrams_cds_fion03$Lang_Tags <- bigrams_cds_fion03$lang
bigrams_cds_fion03$Utterance_clean <- bigrams_cds_fion03$Utterance
bigrams_cds_silvie03$LangTag1 <- bigrams_cds_silvie03$lang
bigrams_cds_silvie03$LangTag2 <- bigrams_cds_silvie03$lang
bigrams_cds_silvie03$Lang_Tags <- bigrams_cds_silvie03$lang
bigrams_cds_silvie03$Utterance_clean <- bigrams_cds_silvie03$Utterance
# function for getting CDS networks
get_network_cds <- function(bigram_df, n_min = 0, modularity_measure = FALSE, edges = "ftp") {
bigrams_count <- bigram_df %>% group_by(LangTag1, LangTag2) %>% count(word1, word2, sort = T)
# bigrams_count <- na.omit(bigrams_count)
# filter out all below n_min
l <- bigrams_count %>%
filter(n >= n_min)
# add transitional probabilities
l1 <- left_join(l, select(get_transition_probabilities(bigram_df, input_column = "Utterance_clean"), -n), by = c("word1", "word2") )
# omit NAs (usually blank spaces)
l1 <- na.omit(l1)
# check if there are data
if(nrow(l1) > 0) {
# get bigram graph edges and vertices
bigram_graph <- l1 %>%
filter(n >= n_min) %>%
ungroup %>% select(word1, word2, all_of(edges)) %>% graph_from_data_frame(directed = FALSE)
# set weight attributes
if(edges == "ftp") {
bigram_graph <- set_edge_attr(bigram_graph, "weight", value = l1$ftp)
} else if (edges == "btp") {
bigram_graph <- set_edge_attr(bigram_graph, "weight", value = l1$btp)
} else if(edges == "n") {
bigram_graph <- set_edge_attr(bigram_graph, "weight", value = l1$n)
}
# set labels
V(bigram_graph)$label <- V(bigram_graph)$name
# Louvain clustering
lv <- cluster_louvain(bigram_graph)
# add Louvain clustering to graph
V(bigram_graph)$community <- membership(lv)
# add color for each community
cur_palette <- viridis::cividis(n = max(V(bigram_graph)$community))
cur_communities <- V(bigram_graph)$community
V(bigram_graph)$community_color <- sapply(1:length(V(bigram_graph)$community), function(i)  cur_communities[i])
# add language and word frequency as attributes
# to do so, we need a list of unigrams
# language tags of unigrams
lang_tbl <- unique(select(bigram_df, word1, word2, lang)) %>% pivot_longer(cols = 1:2) %>% select(value, lang) %>% setNames(c("word", "language")) %>% unique()
# add language tags to network
V(bigram_graph)$language <-  sapply(1:length(V(bigram_graph)$name), function(i) lang_tbl[which(lang_tbl$word == V(bigram_graph)$name[i])[1],]$language)
# get frequencies of individual words
unigrams_freqs <- bigram_df %>% select(Utt_no, Utterance) %>% unique() %>% unnest_tokens(output = "unigram", input = Utterance) %>% group_by(unigram) %>% summarise(
n = n()
)
# add color as attribute
V(bigram_graph)$color <- case_when(V(bigram_graph)$language == "de" ~ "salmon",
V(bigram_graph)$language == "en" ~ "deepskyblue",
V(bigram_graph)$language == "mixed" ~ "tan",
.default = "grey")
# add frequency as attribute
V(bigram_graph)$Freq <- sapply(1:length(V(bigram_graph)), function(i) unigrams_freqs[which(unigrams_freqs$unigram==V(bigram_graph)$name[i]),]$n[1])
}
# return graph or modularity measure
if(modularity_measure) {
return(modularity(lv))
} else {
return(bigram_graph)
}
}
# Chunk 20
# function for plotting
get_plot <- function(cur_network, myseed = 1999, min_freq = 0, interactive = FALSE, repel = TRUE, max.overlaps = 20, communities = "all", input = "igraph", ellipse_alpha = 0.1, layout = "ForceAtlas2") {
if(input == "layout") {
layout <- cur_network
} else {
# get plot layout
layout <- create_layout(cur_network, layout = "fr")
}
if(any(layout == "fr")) {
layout <- layout
} else if(any(layout == "ForceAtlas2")) {
set.seed(myseed)
layout <- create_layout(test_graph, layout = "fr")
layout[,1:2] <- layout.forceatlas2(test_graph, directed = TRUE, iterations = 1000, plotstep = 10) %>% as.data.frame() %>% setNames(c("x", "y"))
}
# allow for selecting individual communities
if(any(communities != "all")) {
layout <- filter(layout, community %in% communities)
}
# Build plot
set.seed(myseed)
p <- ggplot(layout) +
geom_edge_link(aes(x = x, y = y, xend = xend, yend = yend,
edge_width = weight, alpha = weight), color = "gray") +
scale_edge_width(range = c(0.1, 0.5)) +
geom_point_interactive(
aes(x = x, y = y, tooltip = name, color = color, size = Freq)
) +
geom_node_text(aes(label = ifelse(Freq > min_freq, name, ""), size = Freq, color = community_color), repel = repel, max.overlaps = max.overlaps) +
stat_ellipse(aes(x=x, y=y, group = as.factor(community), fill = community_color),
geom = "polygon", alpha = ellipse_alpha, color = NA) +
scale_color_identity() + scale_fill_identity() +
theme_void() +
theme(legend.position = "none")
if(interactive) {
# Zoomable plot with girafe
g <- girafe(
ggobj = p,
options = list(
opts_zoom(min = 1, max = 60),
opts_toolbar(saveaspng = TRUE)
)
)
return(g)
} else {
return(p)
}
}
# Chunk 21
# create seven objects with Fion's networks
for(i in 1:7) {
assign(paste0("network_fion0", i), get(paste0("bigrams_fion0", i)) %>% get_network())
}
# create six objects with Silvie's networks
for(i in 1:6) {
assign(paste0("network_silvie0", i), get(paste0("bigrams_silvie0", i)) %>% get_network())
}
# create seven plot objects named p_f1 to p_f7 for Fion's networks
for(i in 1:7) {
assign(paste0("p_f", i), get(paste0("network_fion0", i)) %>% get_plot(repel = TRUE, max.overlaps = 50, min_freq = 5) + ggtitle(levels(factor(bigrams_fion$age_range))[i]) + theme(plot.title = element_text(face = "bold", hjust = 0.5)))
}
# create six plot objects named p_f1 to p_f7 for Silvie's networks
for(i in 1:6) {
assign(paste0("p_s", i), get(paste0("network_silvie0", i)) %>%  get_plot(repel = TRUE, min_freq = 5, max.overlaps = 50) + ggtitle(levels(factor(bigrams_silvie$age_range))[i]) + theme(plot.title = element_text(face = "bold", hjust = 0.5)))
}
# combine all in one big plot
# titles:
p_t1 <- ggplot() + annotate("text", x = 4, y = 25, label = "bold(paste('Bigram', ' network, Fion'))", size = 12, parse = TRUE) + theme_void()
p_t2 <- ggplot() + annotate("text", x = 4, y = 25, label = "bold(paste('Bigram', ' network, Silvie'))", size = 12, parse = TRUE) + theme_void()
# composite plot:
p_t1 /
(p_f1 | p_f2 | p_f3) /
(p_f4 | p_f5 | p_f6) /
p_f7 /
p_t2 /
(p_s1 | p_s2 | p_s3) /
(p_s4 | p_s5 | p_s6) +
plot_layout(heights = c(.2,1,1,1,.2,1,1))
#ggsave("images/fion_silvie_networks450.png", width = 15, height = 20.5)
# Chunk 22
# get largest communities - Fion
for(i in 1:7) {
cur_network <- get_network(get(paste0("bigrams_fion0", i)), edges = "n")
largest_communities <- cur_network %>% create_layout(layout = "fr") %>% group_by(community) %>% summarise(
n = n()
) %>% arrange(desc(n)) %>% head(3) %>% select(community) %>% as.vector() %>% unname() %>% unlist()
assign(paste0("p_lc_f", i), cur_network %>% get_plot(communities = largest_communities) + ggtitle(levels(factor(bigrams_fion$age_range))[i]) + theme(plot.title = element_text(face = "bold", hjust = 0.5)))
}
# get largest communities - Silvie
for(i in 1:6) {
cur_network <- get_network(get(paste0("bigrams_silvie0", i)))
largest_communities <- cur_network %>% create_layout(layout = "fr") %>% group_by(community) %>% summarise(
n = n()
) %>% arrange(desc(n)) %>% head(3) %>% select(community) %>% as.vector() %>% unname() %>% unlist()
assign(paste0("p_lc_s", i), cur_network %>% get_plot(communities = largest_communities) + ggtitle(levels(factor(bigrams_silvie$age_range))[i]) + theme(plot.title = element_text(face = "bold", hjust = 0.5)))
}
# plot titles
p_t1 <- ggplot() + annotate("text", x = 4, y = 25, label = "bold(paste('Largest', ' communities, Fion'))", size = 12, parse = TRUE) + theme_void()
p_t2 <- ggplot() + annotate("text", x = 4, y = 25, label = "bold(paste('Largest', ' communities, Silvie'))", size = 12, parse = TRUE) + theme_void()
p_t1 /
(p_lc_f1 | p_lc_f4 | p_lc_f7) /
p_t2 /
(p_lc_s1 | p_lc_s3 | p_lc_s6) + plot_layout(heights = c(.2, 1, .2, 1))
# ggsave("images/largest_clusters450.png", width = 15, height = 10)
# Chunk 23
# networs for each of the three time slots, separately for mothers and fathers
# Silvie - mother
silvie_MOT01 <- bigrams_cds_silvie01 %>% filter(Speaker == "MOT") %>% get_network_cds()
silvie_MOT02 <- bigrams_cds_silvie02 %>% filter(Speaker == "MOT") %>% get_network_cds()
silvie_MOT03 <- bigrams_cds_silvie03 %>% filter(Speaker == "MOT") %>% get_network_cds()
# Silvie - father
silvie_FAT01 <- bigrams_cds_silvie01 %>% filter(Speaker == "FAT") %>% get_network_cds()
silvie_FAT02<- bigrams_cds_silvie02 %>% filter(Speaker == "FAT") %>% get_network_cds()
silvie_FAT03 <- bigrams_cds_silvie03 %>% filter(Speaker == "FAT") %>% get_network_cds()
# Fion - mother
fion_MOT01 <- bigrams_cds_fion01 %>% filter(Speaker == "MOT") %>% get_network_cds()
fion_MOT02 <- bigrams_cds_fion02 %>% filter(Speaker == "MOT") %>% get_network_cds()
fion_MOT03 <- bigrams_cds_fion03 %>% filter(Speaker == "MOT") %>% get_network_cds()
# Fion - father
fion_FAT01 <- bigrams_cds_fion01 %>% filter(Speaker == "FAT") %>% get_network_cds()
fion_FAT02<- bigrams_cds_fion02 %>% filter(Speaker == "FAT") %>% get_network_cds()
fion_FAT03 <- bigrams_cds_fion03 %>% filter(Speaker == "FAT") %>% get_network_cds()
# Chunk 25
# networks spanning the entire time period
fion_FAT <- bigrams_cds_fion %>% filter(Speaker == "FAT") %>% get_network_cds()
fion_MOT <- bigrams_cds_fion %>% filter(Speaker == "MOT") %>% get_network_cds()
silvie_FAT <- bigrams_cds_silvie %>% filter(Speaker == "FAT") %>% get_network_cds()
silvie_MOT <- bigrams_cds_silvie %>% filter(Speaker == "MOT") %>% get_network_cds()
# get largest clusters
# Silvie's mother
silvie_MOT_network <- silvie_MOT %>% create_layout(layout = "fr")
largest_clusters <- silvie_MOT_network %>% select(community) %>% table() %>% sort(decreasing = T) %>% head(4) %>% enframe() %>% select(name) %>% as_vector() %>% unname()
largest_clusters_prop <- silvie_MOT_network %>% select(community) %>% table() %>% sort(decreasing = T) %>% prop.table() %>% head(4) %>% round(digits = 4)
# plot four largest communities
silvie_MOT_lc <-  ( silvie_MOT_network %>% filter(community %in% largest_clusters[1]) %>% get_plot(input = "layout") + ggtitle(paste0("Community 1 (", largest_clusters_prop[1]*100, "%)")) |
silvie_MOT_network %>% filter(community %in% largest_clusters[2]) %>% get_plot(input = "layout") +  ggtitle(paste0("Community 2 (", largest_clusters_prop[2]*100, "%)")) |
silvie_MOT_network %>% filter(community %in% largest_clusters[3]) %>% get_plot(input = "layout") + ggtitle(paste0("Community 3 (", largest_clusters_prop[3]*100, "%)")) |
silvie_MOT_network %>% filter(community %in% largest_clusters[3]) %>% get_plot(input = "layout") + ggtitle(paste0("Community 4 (", largest_clusters_prop[4]*100, "%)")))
# Silvie's father
silvie_FAT_network <- silvie_FAT %>% create_layout(layout = "fr")
largest_clusters <- silvie_FAT_network %>% select(community) %>% table() %>% sort(decreasing = T) %>% head(4) %>% enframe() %>% select(name) %>% as_vector() %>% unname()
largest_clusters_prop <- silvie_FAT_network %>% select(community) %>% table() %>% sort(decreasing = T) %>% prop.table() %>% head(4) %>% round(digits = 4)
# plot four largest communities
silvie_FAT_lc <-  ( silvie_FAT_network %>% filter(community %in% largest_clusters[1]) %>% get_plot(input = "layout") + ggtitle(paste0("Community 1 (", largest_clusters_prop[1]*100, "%)")) |
silvie_FAT_network %>% filter(community %in% largest_clusters[2]) %>% get_plot(input = "layout") +  ggtitle(paste0("Community 2 (", largest_clusters_prop[2]*100, "%)")) |
silvie_FAT_network %>% filter(community %in% largest_clusters[3]) %>% get_plot(input = "layout") + ggtitle(paste0("Community 3 (", largest_clusters_prop[3]*100, "%)")) |
silvie_FAT_network %>% filter(community %in% largest_clusters[3]) %>% get_plot(input = "layout") + ggtitle(paste0("Community 4 (", largest_clusters_prop[4]*100, "%)")))
# Fion's mother
fion_MOT_network <- fion_MOT %>% create_layout(layout = "fr")
largest_clusters <- fion_MOT_network %>% select(community) %>% table() %>% sort(decreasing = T) %>% head(4) %>% enframe() %>% select(name) %>% as_vector() %>% unname()
largest_clusters_prop <- fion_MOT_network %>% select(community) %>% table() %>% sort(decreasing = T) %>% prop.table() %>% head(4) %>% round(digits = 4)
# plot four largest communities
fion_MOT_lc <-  ( fion_MOT_network %>% filter(community %in% largest_clusters[1]) %>% get_plot(input = "layout") + ggtitle(paste0("Community 1 (", largest_clusters_prop[1]*100, "%)")) |
fion_MOT_network %>% filter(community %in% largest_clusters[2]) %>% get_plot(input = "layout") +  ggtitle(paste0("Community 2 (", largest_clusters_prop[2]*100, "%)")) |
fion_MOT_network %>% filter(community %in% largest_clusters[3]) %>% get_plot(input = "layout") + ggtitle(paste0("Community 3 (", largest_clusters_prop[3]*100, "%)")) |
fion_MOT_network %>% filter(community %in% largest_clusters[3]) %>% get_plot(input = "layout") + ggtitle(paste0("Community 4 (", largest_clusters_prop[4]*100, "%)")))
# fion's father
fion_FAT_network <- fion_FAT %>% create_layout(layout = "fr")
largest_clusters <- fion_FAT_network %>% select(community) %>% table() %>% sort(decreasing = T) %>% head(4) %>% enframe() %>% select(name) %>% as_vector() %>% unname()
largest_clusters_prop <- fion_FAT_network %>% select(community) %>% table() %>% sort(decreasing = T) %>% prop.table() %>% head(4) %>% round(digits = 4)
# plot four largest communities
fion_FAT_lc <-  ( fion_FAT_network %>% filter(community %in% largest_clusters[1]) %>% get_plot(input = "layout") + ggtitle(paste0("Community 1 (", largest_clusters_prop[1]*100, "%)")) |
fion_FAT_network %>% filter(community %in% largest_clusters[2]) %>% get_plot(input = "layout") +  ggtitle(paste0("Community 2 (", largest_clusters_prop[2]*100, "%)")) |
fion_FAT_network %>% filter(community %in% largest_clusters[3]) %>% get_plot(input = "layout") + ggtitle(paste0("Community 3 (", largest_clusters_prop[3]*100, "%)")) |
fion_FAT_network %>% filter(community %in% largest_clusters[3]) %>% get_plot(input = "layout") + ggtitle(paste0("Community 4 (", largest_clusters_prop[4]*100, "%)")))
# all in one big plot
title_fion_MOT <- ggplot() + annotate("text", x = 4, y = 25, label = "bold(paste('Fion', ' MOT'))", size = 12, parse = TRUE) + theme_void()
title_fion_FAT <- ggplot() + annotate("text", x = 4, y = 25, label = "bold(paste('Fion', ' FAT'))", size = 12, parse = TRUE) + theme_void()
title_silvie_MOT <- ggplot() + annotate("text", x = 4, y = 25, label = "bold(paste('Silvie', ' MOT'))", size = 12, parse = TRUE) + theme_void()
title_silvie_FAT <- ggplot() + annotate("text", x = 4, y = 25, label = "bold(paste('Silvie', ' FAT'))", size = 12, parse = TRUE) + theme_void()
# Chunk 29
network_sizes <- bind_rows(
tibble(
Child = "Fion",
Language = "German",
Size = sapply(1:length(levels(factor(bigrams_fion$Month))), function(i) length(V(bigrams_fion %>% filter(Month == levels(factor(bigrams_fion$Month))[i] & type == "german") %>% select(word1, word2) %>% graph_from_data_frame()))),
Month = levels(factor(bigrams_fion$Month))
),
tibble(
Child = "Fion",
Language = "English",
Size = sapply(1:length(levels(factor(bigrams_fion$Month))), function(i) length(V(bigrams_fion %>% filter(Month == levels(factor(bigrams_fion$Month))[i] & type == "english") %>% select(word1, word2) %>% graph_from_data_frame()))),
Month = levels(factor(bigrams_fion$Month))
),
tibble(
Child = "Fion",
Language = "mixed",
Size = sapply(1:length(levels(factor(bigrams_fion$Month))), function(i) length(V(bigrams_fion %>% filter(Month == levels(factor(bigrams_fion$Month))[i] & type == "mixed") %>% select(word1, word2) %>% graph_from_data_frame()))),
Month = levels(factor(bigrams_fion$Month))
),
tibble(
Child = "Fion",
Language = "all",
Size = sapply(1:length(levels(factor(bigrams_fion$Month))), function(i) length(V(bigrams_fion %>% filter(Month == levels(factor(bigrams_fion$Month))[i]) %>% select(word1, word2) %>% graph_from_data_frame()))),
Month = levels(factor(bigrams_fion$Month))
),
tibble(
Child = "Silvie",
Language = "German",
Size = sapply(1:length(levels(factor(bigrams_silvie$Month))), function(i) length(V(bigrams_silvie %>% filter(Month == levels(factor(bigrams_silvie$Month))[i] & type == "german") %>% select(word1, word2) %>% graph_from_data_frame()))),
Month = levels(factor(bigrams_silvie$Month))
),
tibble(
Child = "Silvie",
Language = "English",
Size = sapply(1:length(levels(factor(bigrams_silvie$Month))), function(i) length(V(bigrams_silvie %>% filter(Month == levels(factor(bigrams_silvie$Month))[i] & type == "english") %>% select(word1, word2) %>% graph_from_data_frame()))),
Month = levels(factor(bigrams_silvie$Month))
),
tibble(
Child = "Silvie",
Language = "mixed",
Size = sapply(1:length(levels(factor(bigrams_silvie$Month))), function(i) length(V(bigrams_silvie %>% filter(Month == levels(factor(bigrams_silvie$Month))[i] & type == "mixed") %>% select(word1, word2) %>% graph_from_data_frame()))),
Month = levels(factor(bigrams_silvie$Month))
),
tibble(
Child = "Silvie",
Language = "all",
Size = sapply(1:length(levels(factor(bigrams_silvie$Month))), function(i) length(V(bigrams_silvie %>% filter(Month == levels(factor(bigrams_silvie$Month))[i]) %>% select(word1, word2) %>% graph_from_data_frame()))),
Month = levels(factor(bigrams_silvie$Month))
)
)
# add columns for letting the "all" line appear differently
network_sizes$alpha <- ifelse(network_sizes$Language=="all", 0.3, 1)
network_sizes$linetype <- ifelse(network_sizes$Language == "all", 2, 1)
network_sizes$linewidth <- ifelse(network_sizes$Language == "all", 2.5, .8)
ggplot(network_sizes, aes(x = Month, y = Size, group = Language, col = Language, linewidth = linewidth, linetype = linetype, alpha = alpha)) + geom_point() + geom_line() + facet_wrap(~Child) +  theme(axis.text.x = element_text(angle=45, hjust=.9, size=12)) +
scale_color_manual(values = c("darkgreen", "deepskyblue", "salmon", "tan")) + scale_alpha_identity() + scale_linetype_identity() + scale_linewidth_identity() +
theme(axis.text = element_text(size = 18)) +
theme(axis.title = element_text(size = 18)) +
theme(strip.text = element_text(size = 18)) +
theme(legend.text = element_text(size = 18)) +
theme(legend.title = element_text(size = 18, face = "bold")) +
theme(text = element_text(size = 18))
# network sizes for the sampled data
network_sizes_sampled <- bind_rows(
tibble(
Child = "Fion",
Language = "German",
Period = levels(factor(bigrams_fion$age_range)),
Size = sapply(1:7, function(i) length(V(get(paste0("bigrams_fion0", i)) %>% filter(type == "german") %>% select(word1, word2) %>% graph_from_data_frame())))
),
tibble(
Child = "Fion",
Language = "English",
Period = levels(factor(bigrams_fion$age_range)),
Size = sapply(1:7, function(i) length(V(get(paste0("bigrams_fion0", i)) %>% filter(type == "english") %>% select(word1, word2) %>% graph_from_data_frame())))
),
tibble(
Child = "Fion",
Language = "mixed",
Period = levels(factor(bigrams_fion$age_range)),
Size = sapply(1:7, function(i) length(V(get(paste0("bigrams_fion0", i)) %>% filter(type == "mixed") %>% select(word1, word2) %>% graph_from_data_frame())))
),
tibble(
Child = "Fion",
Language = "all",
Period = levels(factor(bigrams_fion$age_range)),
Size = sapply(1:7, function(i) length(V(get(paste0("bigrams_fion0", i)) %>% select(word1, word2) %>% graph_from_data_frame())))
),
tibble(
Child = "Silvie",
Language = "German",
Period = levels(factor(bigrams_silvie$age_range)),
Size = sapply(1:6, function(i) length(V(get(paste0("bigrams_silvie0", i)) %>% filter(type == "german") %>% select(word1, word2) %>% graph_from_data_frame())))
),
tibble(
Child = "Silvie",
Language = "English",
Period = levels(factor(bigrams_silvie$age_range)),
Size = sapply(1:6, function(i) length(V(get(paste0("bigrams_silvie0", i)) %>% filter(type == "english") %>% select(word1, word2) %>% graph_from_data_frame())))
),
tibble(
Child = "Silvie",
Language = "mixed",
Period = levels(factor(bigrams_silvie$age_range)),
Size = sapply(1:6, function(i) length(V(get(paste0("bigrams_silvie0", i)) %>% filter(type == "mixed") %>% select(word1, word2) %>% graph_from_data_frame())))
),
tibble(
Child = "Silvie",
Language = "all",
Period = levels(factor(bigrams_silvie$age_range)),
Size = sapply(1:6, function(i) length(V(get(paste0("bigrams_silvie0", i)) %>% select(word1, word2) %>% graph_from_data_frame())))
)
)
# add columns for letting the "all" line appear differently
network_sizes_sampled$alpha <- ifelse(network_sizes_sampled$Language=="all", 0.3, 1)
network_sizes_sampled$linetype <- ifelse(network_sizes_sampled$Language == "all", 2, 1)
network_sizes_sampled$linewidth <- ifelse(network_sizes_sampled$Language == "all", 2.5, .8)
ggplot(network_sizes_sampled, aes(x = Period, y = Size, group = Language, col = Language, linewidth = linewidth, linetype = linetype, alpha = alpha)) + geom_point() + geom_line() + facet_wrap(~Child, scales = "free_x") +  theme(axis.text.x = element_text(angle=45, hjust=.9, size=12)) +
scale_color_manual(values = c("darkgreen", "deepskyblue", "salmon", "tan")) + scale_alpha_identity() + scale_linetype_identity() + scale_linewidth_identity() +
theme(axis.text = element_text(size = 18)) +
theme(axis.title = element_text(size = 18)) +
theme(strip.text = element_text(size = 18)) +
theme(legend.text = element_text(size = 18)) +
theme(legend.title = element_text(size = 18, face = "bold")) +
theme(text = element_text(size = 18))
# ggsave("images/network_size.png", width = 12, height = 6)
